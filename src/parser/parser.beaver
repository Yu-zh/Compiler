%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, NUMERAL, INT, BOOL, ASSIGN, SEMI, RETURN, COMMA, IF, WHILE, ELSE,
    ADD, MUL, DIV, MIN, MOD, LE, LT, GE, GT, EQ, NEQ,
    LBRACE, RBRACE, LPARENTHESES, RPARENTHESES;

%typeof program = "Program";
%typeof func_list = "List";
%typeof func = "Func";
%typeof assign = "Assign";
%typeof var_decl = "VarDecl";
%typeof id_use = "IdUse";
%typeof id_decl = "IdDecl";
%typeof expr = "Expr";
%typeof stmt = "Stmt";
%typeof stmt_list = "List";
%typeof decl_opt = "Opt";
%typeof number = "Numeral";
%typeof arithmetic = "Expr";
%typeof add = "Expr";
%typeof mul = "Expr";
%typeof factor = "Expr";
%typeof comparison = "Expr";
%typeof ret = "Return";
%typeof para_list = "List";
%typeof para = "Para";
%typeof if_stmt = "IfStmt";
%typeof while_stmt = "WhileStmt";
%typeof call = "Expr";
%typeof funccallstmt = "Stmt";
%typeof expr_list = "List";
%typeof type = "Type";
%typeof type_int = "IntType";
%typeof type_bool = "BoolType";

%goal program;

program = func_list.a {: return new Program(a); :} ;


func_list =
    /* epsilon */ {: return new List(); :}
    |   func_list.a func.b {: return a.add(b); :} ;

func =
    INT id_decl.a LPARENTHESES para_list.b RPARENTHESES LBRACE stmt_list.c RBRACE{: return new Func(a,b,c); :} ;

para_list =
    /* epsilon */ {: return new List(); :}
    |   para.a {: return new List().add(a); :}
    |   para_list.a COMMA para.b {: return a.add(b); :};

para =
    INT id_decl.a {: return new Para(a); :};


stmt_list =
    /* epsilon */ {: return new List(); :}
    |   stmt_list.a stmt.b {: return a.add(b); :};

stmt =
    assign
    |   var_decl
    |   ret
    |   if_stmt
    |   while_stmt
    |   funccallstmt;

assign =
    id_use.a ASSIGN expr.b SEMI {: return new Assign(a,b); :};

var_decl =
    type.t id_decl.a decl_opt.b SEMI {: return new VarDecl(t,a,b); :};

ret =
    RETURN expr.a SEMI {: return new Return(a); :};

if_stmt =
    IF LPARENTHESES expr.a RPARENTHESES LBRACE stmt_list.b RBRACE {: return new IfStmt(a,b,new List()); :}
    |   IF LPARENTHESES expr.a RPARENTHESES LBRACE stmt_list.b RBRACE ELSE LBRACE stmt_list.c RBRACE {: return new IfStmt(a,b,c); :};

while_stmt =
    WHILE LPARENTHESES expr.a RPARENTHESES LBRACE stmt_list.b RBRACE {: return new WhileStmt(a,b); :};

decl_opt =
    /* epsilon */ {: return new Opt(); :}
    |   ASSIGN expr.a {: return new Opt(a); :};

funccallstmt =
    id_use.a LPARENTHESES expr_list.b RPARENTHESES SEMI {: return new FuncCallStmt(new Call(a,b)); :};


expr =
    arithmetic
    |   comparison;

comparison =
    arithmetic.a EQ arithmetic.b {: return new Eq(a,b); :}
    |   arithmetic.a NEQ arithmetic.b {: return new Neq(a,b); :}
    |   arithmetic.a LE arithmetic.b {: return new Le(a,b); :}
    |   arithmetic.a LT arithmetic.b {: return new Lt(a,b); :}
    |   arithmetic.a GE arithmetic.b {: return new Ge(a,b); :}
    |   arithmetic.a GT arithmetic.b {: return new Gt(a,b); :};

arithmetic =
    add;

add =
    add.a ADD mul.b {: return new Add(a,b); :}
    |   add.a MIN mul.b {: return new Min(a,b); :}
    |   mul;

mul =
    mul.a MUL factor.b {: return new Mul(a,b); :}
    |   mul.a DIV factor.b {: return new Div(a,b); :}
    |   mul.a MOD factor.b {: return new Mod(a,b); :}
    |   factor;

factor =
    id_use
    |   number
    |   LPARENTHESES expr.a RPARENTHESES {: return a; :}
    |   call;

number =
    NUMERAL.num {: return new Numeral(num); :};

call =
    id_use.a LPARENTHESES expr_list.b RPARENTHESES {: return new Call(a,b); :};

expr_list =
    /* epsilon */ {: return new List(); :}
    |   expr.a {: return new List().add(a); :}
    |   expr_list.a COMMA expr.b {: return a.add(b); :};

id_use = ID.id {: return new IdUse(id); :} ;
id_decl = ID.id {: return new IdDecl(id); :};

type_int = INT.i {: return new Type(i); :};
type_bool = BOOL.i {: return new Type(i); :};
type =
    type_int
    |   type_bool;