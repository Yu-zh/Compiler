aspect TypeCheck{
    eq Program.getChild().type() = unknownType();
    eq Program.unknownDecl().type() = unknownType();

    syn Type Expr.type();

    eq IdUse.type() = decl().type();

    eq Numeral.type() = intType();
    inh Type Numeral.intType();

    eq BinaryExpr.type() {
        if (getLeft().type() == getRight().type()) {
            return getLeft().type();
        }
        return unknownType();
    }
    eq ComparisonExpr.type() = boolType();
    inh Type ComparisonExpr.boolType();

    eq Call.type() = intType();
    inh Type Call.intType();

    inh Type IdDecl.type();
    eq VarDecl.getIdDecl().type() {
        String typeString = getType().getString();
        if (typeString.equals("int")) {
            return intType();
        } else if (typeString.equals("bool")) {
            return boolType();
        } else {
            System.out.println("unknown type in vardecl!!!");
        }
        return unknownType();
    }
    inh Type VarDecl.intType();
    inh Type VarDecl.boolType();


    eq Program.getChild().expectedType() = unknownType(); //root pattern
    inh Type Expr.expectedType();

    eq IfStmt.getCond().expectedType() = boolType();
    inh BoolType IfStmt.boolType();
    eq WhileStmt.getCond().expectedType() = boolType();
    inh BoolType WhileStmt.boolType();
    eq VarDecl.getExpr().expectedType() = getIdDecl().type();

    syn boolean Stmt.typeNotCheck() = false;
    syn boolean IfStmt.typeNotCheck() {
        boolean result = (!getCond().expectedType().isCompatible(getCond().type())) && (!getCond().type().isUnknownType());
        return result;
    }
    syn boolean WhileStmt.typeNotCheck() = (!getCond().expectedType().isCompatible(getCond().type())) && (!getCond().type().isUnknownType());
    syn boolean VarDecl.typeNotCheck() = (!getExpr().expectedType().isCompatible(getExpr().type())) && (!getExpr().type().isUnknownType());
}

aspect Types{
    syn nta IntType Program.intType() = new IntType();
    syn nta BoolType Program.boolType() = new BoolType();

    eq Program.getChild().intType() = intType();
    eq Program.getChild().boolType() = boolType();

    syn boolean Type.isCompatible(Type other) = true;
    eq IntType.isCompatible(Type other) = other == intType();
    inh IntType IntType.intType();
    eq BoolType.isCompatible(Type other) = other == boolType();
    inh BoolType BoolType.boolType();
}