Program ::= Func*;

Func ::= IdDecl Para* Stmt*;
Para ::= IdDecl;

abstract Stmt;
VarDecl : Stmt ::= Type IdDecl [Expr];
Assign : Stmt ::= IdUse Expr;
Return : Stmt ::= Expr;
IfStmt : Stmt ::= Cond:Expr Body:Stmt* Else:Stmt*;
WhileStmt : Stmt ::= Cond:Expr Body:Stmt*;
FuncCallStmt : Stmt ::= Call;

abstract Expr;
Numeral : Expr ::= <NUMERAL>;
IdUse : Expr ::= <ID>;

abstract BinaryExpr:Expr ::= Left:Expr Right:Expr;
Add : BinaryExpr ;
Mul : BinaryExpr ;
Div : BinaryExpr ;
Min : BinaryExpr ;
Mod : BinaryExpr ;

abstract ComparisonExpr:Expr ::= Left:Expr Right:Expr;
Le : ComparisonExpr ;
Ge : ComparisonExpr ;
Lt : ComparisonExpr ;
Gt : ComparisonExpr ;
Eq : ComparisonExpr ;
Neq : ComparisonExpr;

Call : Expr ::= Fun:IdUse Expr*;

IdDecl ::= <ID>;

UnknownDecl : IdDecl;
PreFunc : Func;

abstract Type;
IntType : Type;
BoolType : Type;
UnknownType : Type;