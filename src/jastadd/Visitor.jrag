aspect Visitor {
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Numeral node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);
		public Object visit(Func node, Object data);
		public Object visit(Para node, Object data);
		public Object visit(VarDecl node, Object data);
		public Object visit(Assign node, Object data);
		public Object visit(Return node, Object data);
		public Object visit(IfStmt node, Object data);
		public Object visit(WhileStmt node, Object data);
		public Object visit(Print node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Min node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Le node, Object data);
		public Object visit(Ge node, Object data);
		public Object visit(Lt node, Object data);
		public Object visit(Gt node, Object data);
		public Object visit(Eq node, Object data);
		public Object visit(Neq node, Object data);
		public Object visit(Call node, Object data);
		public Object visit(Read node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Func.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Para.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object VarDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Assign.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Return.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object IfStmt.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object WhileStmt.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Print.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Add.accept(Visitor visitor, Object data) {
       	return visitor.visit(this, data);
    }
    public Object Mul.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Div.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Min.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Mod.accept(Visitor visitor, Object data) {
       	return visitor.visit(this, data);
    }
    public Object Le.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Ge.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Lt.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Gt.accept(Visitor visitor, Object data) {
       	return visitor.visit(this, data);
    }
    public Object Eq.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Neq.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Call.accept(Visitor visitor, Object data) {
    	return visitor.visit(this, data);
    }
    public Object Read.accept(Visitor visitor, Object data) {
       	return visitor.visit(this, data);
    }
}