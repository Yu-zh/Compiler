aspect CodeGen {
    public void Program.genCode(PrintStream out) {
        out.println(".global _start");
        out.println(".data");
		out.println("ask_message: .ascii \"Please enter a number: \"");
		out.println("ask_msg_len: .quad 23");
		out.println("buf: .skip 1024");
		out.println();
		out.println(".text");
        // call main function
        for (Func f : getFuncList()) {
            if (f.getIdDecl().getID().equals("main")) {
                out.println("_start:");
                for (Stmt s : f.getStmtList()) {
                    s.genCode(out);
                }
            }
        }
        // call sys_exit
        out.println("       movq %rax, %rdi");
        out.println("       movq $60, %rax");
        out.println("       syscall"); // Done!

        for (Func f : getFuncList()) {
            if (!f.getIdDecl().getID().equals("main")) {
                out.println(f.getIdDecl().getID() + ":");
                f.genCode(out);
            }
        }

        // Helper procedures for input/output:
		out.println("# Procedure to read number from stdin.");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # sys_read(0, buf, 1024)");
		out.println("        ### Convert string to integer (atoi).");
		out.println("        ### RAX = string length (nchar)");
		out.println("        ### RSI = string pointer");
		out.println("        movq $0, %rdx           # sum <- 0");
		out.println("        cmpq $0, %rax           # if (nchar > 0)");
		out.println("        jle atoi_done           # nchar <= 0");
		out.println("        movq %rsi, %rdi         # copy RSI to RDI for sign check later");
		out.println("        movb (%rsi), %ch        # look at first char");
		out.println("        cmp $0x2D, %ch");
		out.println("        jne atoi_loop");
		out.println("        incq %rsi               # skip sign char");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rcx     # move byte, zero extend to quad-word");
		out.println("        cmpq $0x30, %rcx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rcx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rcx        # value of character");
		out.println("        addq %rcx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # put result value in RAX");
		out.println("        movb (%rdi), %ch        # check sign char");
		out.println("        cmp $0x2D, %ch");
		out.println("        jne read_end");
		out.println("        negq %rax               # negate result due to sign char");
		out.println("read_end:");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout.");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### Convert integer to string (itoa).");
		out.println("        movq 16(%rbp), %rax");
		out.println("        movq $(buf+1023), %rsi  # RSI = write pointer (starts at end of buffer)");
		out.println("        movb $0x0A, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # RCX = string length");
		out.println("        cmpq $0, %rax");
		out.println("        jge itoa_loop");
		out.println("        negq %rax               # negate to make RAX positive");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rdi");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rdi              # divide RDX:RAX by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq 16(%rbp), %rax");
		out.println("        cmpq $0, %rax");
		out.println("        jge print_end");
		out.println("        decq %rsi");
		out.println("        incq %rcx");
		out.println("        movb $0x2D, (%rsi)");
		out.println("print_end:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
    }
    public void Func.genCode(PrintStream out) {
        out.println("       pushq %rbp");
        out.println("       movq %rsp, %rbp");
        // func body
        for (Stmt s : getStmtList()) {
            s.genCode(out);
        }
        out.println("       movq %rbp, %rsp");
        out.println("       popq %rbp");
        out.println("       ret");
    }

    public void Stmt.genCode(PrintStream out) {
        System.out.println("stmt here");
    }
    public void Return.genCode(PrintStream out) {
        if (hasExpr()) {
            getExpr().genEval(out);
        }
    }
    public void FuncCallStmt.genCode(PrintStream out) {
        getCall().genEval(out);
    }
    public void IfStmt.genCode(PrintStream out) {
        getCond().genConditionalJump("else" + index(), out);
        for (Stmt s : getBodyList()) {
            s.genCode(out);
            out.println("       jmp " + "fi" + index());
        }
        out.println("else" + index() + ":");
        for (Stmt s : getElseList()) {
            s.genCode(out);
        }
        out.println("fi" + index() + ":");
    }

    public void Expr.genEval(PrintStream out) {
        /* nothing */
    }
    public void Numeral.genEval(PrintStream out) {
        out.println("       movq $" + getNUMERAL() + ", %rax");
    }
    public void Call.genEval(PrintStream out) {
        // prepare stack for parameters
        int n = getNumExpr();
        if (n != 0) {
            out.println("       subq $" + Integer.toString(n*8) + ", %rsp");
            for (int i = 0; i < n; i++) {
                getExpr(i).genEval(out);
                out.println("       movq %rax, " + Integer.toString((i+1)*8) + "(%rsp)");
            }
            for (int i = n; i > 0; i--) {
                out.println("       pushq " + Integer.toString(8*n) + "(%rsp)");
            }
        }
        out.println("       call " + getFun().getID());
        if (n != 0) {
            out.println("       addq $" + Integer.toString(n*8) + ", %rsp");
        }
    }
    public void IdUse.genEval(PrintStream out) {
        out.println("       movq " + decl().addr() + ", %rax");
    }
    public void Add.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       popq %rbx");
        out.println("       addq %rbx, %rax");
    }
    public void Min.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       movq %rax, %rbx");
        out.println("       popq %rax");
        out.println("       subq %rbx, %rax");
    }
    public void Mul.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       popq %rbx");
        out.println("       imulq %rbx, %rax");
    }
    public void Div.genEval(PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       movq %rax, %rbx");
        out.println("       popq %rax");
        out.println("       movq $0, %rdx");
        out.println("       idivq %rbx");
    }
    public void Expr.genConditionalJump(String label, PrintStream out){
        System.out.println("conditional jump");
    }
    // All the condition get neg
    public void Ge.genConditionalJump(String label, PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       popq %rbx");
        out.println("       cmp %rax, %rbx");
        out.println("       jl " + label);
    }
    public void Le.genConditionalJump(String label, PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       popq %rbx");
        out.println("       cmp %rax, %rbx");
        out.println("       jg " + label);
    }
    public void Lt.genConditionalJump(String label, PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       popq %rbx");
        out.println("       cmp %rax, %rbx");
        out.println("       jge " + label);
    }
    public void Gt.genConditionalJump(String label, PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       popq %rbx");
        out.println("       cmp %rax, %rbx");
        out.println("       jle " + label);
    }
    public void Eq.genConditionalJump(String label, PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       popq %rbx");
        out.println("       cmp %rax, %rbx");
        out.println("       jne " + label);
    }
    public void Neq.genConditionalJump(String label, PrintStream out) {
        getLeft().genEval(out);
        out.println("       pushq %rax");
        getRight().genEval(out);
        out.println("       popq %rbx");
        out.println("       cmp %rax, %rbx");
        out.println("       je " + label);
    }

    inh String IdDecl.addr();
    eq Func.getPara(int i).addr() = Integer.toString(8*(i+2)) + "(%rbp)";
}